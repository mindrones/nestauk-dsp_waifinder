import {getId} from '@svizzle/utils';
import * as _ from 'lamb';
import {writable} from 'svelte/store';

import {MIN_SCORE} from 'app/config';

/* input data */

export const _dataset = writable({
	org_types: {},
	orgs: [],
	placesById: {},
	regionsById: {},
});

const makeRegionsById = _.pipe([
	_.indexBy(_.getKey('region_id')),
	_.mapValuesWith(_.pick(['region_id', 'region_name']))
]);

export const updateDataset = ({org_types, orgs, places}) => {
	const placesById = _.index(places, getId); // [1]
	const regionsById = makeRegionsById(places);
	const augmentedOrgs = _.map(orgs,
		({place_id, topics, types, ...others}) => ({
			...others,
			place_id,
			place: placesById[place_id],
			topics: _.filter(topics, ({score}) => score >= MIN_SCORE), // [1]
			types: _.map(types, typeId => org_types[typeId]),
		})
	);

	_dataset.set({
		org_types,
		orgs: augmentedOrgs,
		placesById,
		regionsById,
	});
};
// [1] TODO we could do these in `uinext/src/bin/mergeAnnotations.js`
