import {
	getId,
	getValue,
	objectToKeyValueArray,
} from '@svizzle/utils';
import * as _ from 'lamb';
import {derived, writable} from 'svelte/store';

import {MIN_SCORE} from 'app/config';

/* input data */

export const _data = writable({
	org_types: {},
	orgs: [],
	placesById: {},
	regionsById: {},
});

const makeRegionsById = _.pipe([
	_.indexBy(_.getKey('region_id')),
	_.mapValuesWith(_.pick(['region_id', 'region_name']))
]);

export const updateData = ({org_types, orgs, places}) => {
	// FIXME we could do this in `uinext/src/bin/mergeAnnotations.js`
	const placesById = _.index(places, getId);
	const regionsById = makeRegionsById(places);
	const augmentedOrgs = _.map(orgs,
		({place_id, topics, types, ...others}) => ({
			...others,
			place_id,
			place: placesById[place_id],
			topics: _.filter(topics, ({score}) => score >= MIN_SCORE),
			types: _.map(types, typeId => org_types[typeId]),
		})
	);

	_data.set({
		org_types,
		orgs: augmentedOrgs,
		placesById,
		regionsById,
	});
};

/* barchart by place */

const makeKeyPlaceIdValueOrgsCount = _.pipe([
	_.countBy(_.getKey('place_id')),
	objectToKeyValueArray,
	_.sortWith([_.sorterDesc(getValue)]),
]);
export const _keyPlaceLabelValueOrgsCount = derived(
	_data,
	({orgs, placesById}) => _.map(
		makeKeyPlaceIdValueOrgsCount(orgs),
		({key, value}) => ({
			key: `${placesById[key].name} (${placesById[key].type})`,
			value
		})
	)
);

/* barchart by region */

const makeKeyRegionIdValueOrgsCount = _.pipe([
	_.countBy(_.getPath('place.region_id')),
	objectToKeyValueArray,
	_.sortWith([_.sorterDesc(getValue)]),
]);
export const _keyRegionLabelValueOrgsCount = derived(
	_data,
	({orgs, regionsById}) => _.map(
		makeKeyRegionIdValueOrgsCount(orgs),
		({key, value}) => ({
			key: `${regionsById[key].region_name} (${key})`,
			value
		})
	)
);
