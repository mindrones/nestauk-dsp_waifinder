import {
	getId,
	getKey,
	getValue,
	objectToKeyValueArray,
	sortValueDescKeyAsc,
} from '@svizzle/utils';
import * as _ from 'lamb';
import {derived} from 'svelte/store';

import {_dataset} from 'app/stores/dataset';
import {_bbox_WSEN} from 'app/stores/selectionGeo';
import {getTopics} from 'app/utils/dataUtils';

/* orgs */

export const _orgs = derived(
	[_dataset, _bbox_WSEN],
	([{orgs}, [w, s, e, n]]) => _.filter(orgs,
		({location: {lat, lon}}) =>
			lon >= w &&
			lat >= s &&
			lon <= e &&
			lat <= n
	)
);

/* barchart by topic */

export const _keyTopicIdValueOrgsCount = derived(
	_orgs,
	_.pipe([
		_.flatMapWith(getTopics),
		_.countBy(getId),
		objectToKeyValueArray,
		_.sortWith([
			_.sorterDesc(getValue),
			getKey
		]),
	])
);

/* barchart by place */

const makeKeyPlaceIdValueOrgsCount = _.pipe([
	_.countBy(_.getKey('place_id')),
	objectToKeyValueArray,
]);
export const _keyPlaceLabelValueOrgsCount = derived(
	[_orgs, _dataset],
	([orgs, {placesById}]) => sortValueDescKeyAsc(
		_.map(
			makeKeyPlaceIdValueOrgsCount(orgs),
			({key, value}) => ({
				key: `${placesById[key].name} (${placesById[key].type})`,
				value
			})
		)
	)
);

/* barchart by region */

const makeKeyRegionIdValueOrgsCount = _.pipe([
	_.countBy(_.getPath('place.region_id')),
	objectToKeyValueArray,
]);
export const _keyRegionLabelValueOrgsCount = derived(
	[_orgs, _dataset],
	([orgs, {regionsById}]) => sortValueDescKeyAsc(
		_.map(
			makeKeyRegionIdValueOrgsCount(orgs),
			({key, value}) => ({
				key: `${regionsById[key].region_name} (${key})`,
				value
			})
		)
	)
);
