import {
	getId,
	getValue,
	objectToKeyValueArray,
} from '@svizzle/utils';
import * as _ from 'lamb';
import {derived, writable} from 'svelte/store';

/* input data */

export const _data = writable({
	org_types: {},
	orgs: [],
	places: [],
});

export const _placesById = derived(
	_data,
	({places}) => _.index(places, getId)
);

export const _orgs = derived(
	[_data, _placesById],
	([{orgs, org_types}, placesById]) => _.map(orgs,
		org => ({
			...org,
			place: placesById[org.place_id],
			types: _.map(org.types, typeId => org_types[typeId])
		})
	)
);

/* barchat by place */

const makeKeyPlaceIdValueOrgsCount = _.pipe([
	_.countBy(_.getKey('place_id')),
	objectToKeyValueArray,
	_.sortWith([_.sorterDesc(getValue)])
]);
export const _keyPlaceLabelValueOrgsCount = derived(
	[_orgs, _placesById],
	([orgs, placesById]) => _.map(
		makeKeyPlaceIdValueOrgsCount(orgs),
		({key, value}) => ({
			key: `${placesById[key].name} (${placesById[key].type})`,
			value
		})
	)
);
